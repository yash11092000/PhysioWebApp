@model PhysioWeb.Models.Booking

@{
	ViewData["Title"] = "Book Session";
	var bookingType = Context.Request.Query["BookingType"].ToString();
	string bookingTitle = "";
	switch (bookingType)
	{
		case "1":
			bookingTitle = "Online Consultation";
			break;
		case "2":
			bookingTitle = "Book Online Physiotherapy";
			break;
		case "3":
			bookingTitle = "Physiotherapy at Home";
			break;
	}
}
<style>
	/* Step Visibility */
	.step {
		display: none;
	}

		.step.active {
			display: block;
		}

	/* Progress Bar */
	.progress-bar {
		background-color: #0077B6 !important;
	}

	/* Themed Buttons */
	.btn-theme {
		background-color: #0077B6;
		color: #fff;
		border-radius: 12px;
		transition: background-color 0.3s ease;
	}

		.btn-theme:hover {
			background-color: #023E8A;
			color: #fff;
		}

	/* Secondary Button */
	.btn-secondary {
		background-color: #E0F7FA;
		color: #023047;
		border: none;
		border-radius: 12px;
	}

		.btn-secondary:hover {
			background-color: #CAF0F8;
			color: #023047;
		}

	/* Input focus styles */
	.form-control:focus,
	textarea:focus {
		border-color: #0077B6 !important;
		box-shadow: 0 0 0 0.2rem rgba(0, 119, 182, 0.25) !important;
	}

	/* Page background */
	body {
		background-color: #F1FAFB;
	}

	/* Form Card */
	form.bg-white {
		border: none;
		box-shadow: 0 8px 24px rgba(0, 119, 182, 0.1);
	}

	h2 {
		color: #023047 !important;
	}

	.req{
		color:red;
	}
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">


<div class="container py-5">
	<h2 class="fw-bold mb-5 text-center">@bookingTitle</h2>

	<form id="multiStepForm" class="bg-white p-5 rounded-4 shadow mx-auto" style="max-width:700px;">
		<!-- Progress Bar -->
		<div class="progress mb-4" style="height: 10px;">
			<div class="progress-bar" id="formProgress" style="width: 25%;"></div>
		</div>

		<!-- Step 1 -->
		<div class="step active">
			<div class="mb-3">
				<label class="form-label fw-bold">Name of Patient <span class="req">*</span></label>
				<input type="text" class="form-control" id="Name" name="PatientName" required>
			</div>
			<div class="mb-3">
				<label class="form-label fw-bold">Mobile Number <span class="req">*</span></label>
				<input type="text" class="form-control" id="MobileNumber" name="MobileNumber" maxlength="10" required>
				<div class="invalid-feedback" id="mobileError"></div>
			</div>
		</div>

		<!-- Step 2 -->
		<div class="step">
			<div class="mb-3">
				<label class="form-label fw-bold">City <span class="req">*</span></label>
				<input type="text" class="form-control" id="City" name="City" required>
			</div>
			<div class="mb-3">
				<label class="form-label fw-bold">Pincode <span class="req">*</span></label>
				<input type="text" class="form-control" id="Pincode" name="Pincode" required>
				<div class="invalid-feedback" id="pincodeError"></div>
				<div class="valid-feedback">Looks good!</div>
			</div>
		</div>

		<!-- Step 3 -->
		<div class="step">
			<div class="mb-3">
				<label class="form-label fw-bold">Address</label>
				<textarea class="form-control" id="Address" rows="2" name="Address" required></textarea>
			</div>
			<div class="mb-3">
				<label class="form-label fw-bold">Pain Condition <span class="req">*</span></label>
				<input type="text" class="form-control" id="PainCondition" name="PainCondition" required>
			</div>
		</div>

		<!-- Step 4 -->
		<div class="step">
			<div class="row g-3">
				<div class="col-md-6">
					<label class="form-label fw-bold">Select Date <span class="req">*</span></label>
					<input type="text" class="form-control" id="BookingDate" name="AppointmentDate" placeholder="Choose Date" required>
				</div>
				<div class="col-md-6">
					<label class="form-label fw-bold">Select Time <span class="req">*</span></label>
					<input type="text" class="form-control" name="AppointmentTime" id="BookingTime" placeholder="Choose Time" required>
				</div>
			</div>
		</div>
		<input type="text" name="BookingType" id="BookingType" value="@bookingType" hidden />
		<!-- Navigation Buttons -->
		<div class="d-flex justify-content-between mt-4">
			<button type="button" id="nextBtn" class="btn btn-theme">Next</button>
			<button type="submit" id="submitBtn" class="btn btn-theme d-none">Submit</button>
			<button type="button" id="prevBtn" class="btn btn-secondary d-none">Previous</button>
		</div>
	</form>
</div>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
	<script>
		  let currentStep = 0;
		const steps = $(".step");
		const totalSteps = steps.length;

		function showStep(step) {
			steps.removeClass("active").eq(step).addClass("active");

			// Progress bar
			const progress = ((step + 1) / totalSteps) * 100;
			$("#formProgress").css("width", progress + "%");

			// Buttons
			if (step === 0) {
				$("#prevBtn").addClass("d-none");
			} else {
				$("#prevBtn").removeClass("d-none");
			}

			if (step === totalSteps - 1) {
				$("#nextBtn").addClass("d-none");
				$("#submitBtn").removeClass("d-none");
			} else {
				$("#nextBtn").removeClass("d-none");
				$("#submitBtn").addClass("d-none");
			}
		}

		$("#nextBtn").on("click", function () {
			if (currentStep < totalSteps - 1) {
				currentStep++;
				showStep(currentStep);
			}
		});

		$("#prevBtn").on("click", function () {
			if (currentStep > 0) {
				currentStep--;
				showStep(currentStep);
			}
		});
				// Validation function
		function validateStep(step) {
			let valid = true;
			const $inputs = steps.eq(step).find(":input");

			$inputs.each(function() {
				$(this).removeClass("is-invalid");

				if (!this.value) { // required check
					valid = false;
					$(this).addClass("is-invalid");
				} else {
					// Custom validation
					if (this.id === "MobileNumber" && !/^\d{10}$/.test(this.value)) {
						valid = false;
						$(this).addClass("is-invalid");
					}
					if (this.id === "Pincode" && !/^\d{6}$/.test(this.value)) {
						valid = false;
						$(this).addClass("is-invalid");
					}
				}
			});

			return valid;
		}

		$("#submitBtn").on("click", function (e) {
				e.preventDefault();
				if (!validateStep(currentStep)) return;

				 $.ajax({
						url: '/Booking/SaveSession',
						type: 'POST',
						data: $("#multiStepForm").serialize(),
						success: function(data){
							if(data > 0){
						 Swal.fire({
							icon: 'success',
							title: 'Booking Successful!',
							text: 'Your consultation has been booked.',
							confirmButtonColor: '#f28500'
						});
						$("#multiStepForm")[0].reset();
						currentStep = 0;
						showStep(currentStep);
							}
							else{
							Swal.fire({
							icon: 'error',
							title: 'Submission Failed!',
							text: 'Something Went Wrong.',
							confirmButtonColor: '#f28500'
						});
					}
						},
						error: function() {
							Swal.fire({
								icon: 'error',
								title: 'Submission Failed!',
								text: 'Please try again later.',
								confirmButtonColor: '#f28500'
							});
						}
		});
		});

		// Initialize Flatpickr
		flatpickr("#BookingDate", { dateFormat: "d-m-Y",minDate: "today"  });
		flatpickr("#BookingTime", { enableTime: true, noCalendar: true, dateFormat: "H:i" });

		// Show first step
		showStep(currentStep);


			  $('#MobileNumber').on('change', function() {
			validateMobileNumber($(this).val());
		});

		function validateMobileNumber(mobileNumber) {
			const mobileInput = $('#MobileNumber');
			const errorDiv = $('#mobileError');

			// Remove any existing validation classes
			mobileInput.removeClass('is-valid is-invalid');

			// Basic check for empty field
			if (!mobileNumber.trim()) {
				mobileInput.addClass('is-invalid');
				errorDiv.text('Mobile number is required.');
				return false;
			}

			// Remove all non-digit characters for validation
			const cleanNumber = mobileNumber.replace(/\D/g, '');

			// Check if it's a valid mobile number (adjust regex as needed for your country)
			// This regex validates 10-digit numbers (US/Canada format)
			const mobileRegex = /^\d{10}$/;

			if (!mobileRegex.test(cleanNumber)) {
				mobileInput.addClass('is-invalid');
				errorDiv.text('Please enter a valid 10-digit mobile number.');
				return false;
			}

			// If validation passes
			mobileInput.addClass('is-valid');
			errorDiv.text('');
			return true;
		}


			  // Validate on change (when user leaves the field)
		$('#Name').on('change', function() {
			validatePatientName($(this).val());
		});

		// Optional: Validate on input (real-time as user types)
		$('#Name').on('input', function() {
			const name = $(this).val();
			if (name.trim().length > 0) {
				$(this).removeClass('is-invalid');
				$(this).addClass('is-valid');
				$('#nameError').text('');
			}
		});

		function validatePatientName(name) {
			const nameInput = $('#Name');
			const errorDiv = $('#nameError');

			nameInput.removeClass('is-valid is-invalid');

			if (!name.trim()) {
				nameInput.addClass('is-invalid');
				errorDiv.text('Patient name is required.');
				return false;
			}

			nameInput.addClass('is-valid');
			errorDiv.text('');
			return true;
		}
			  $('#Pincode').on('change', function() {
			validatePincode($(this).val());
		});

		function validatePincode(pincode) {
			const pincodeInput = $('#Pincode');
			const errorDiv = $('#pincodeError');

			// Remove any existing validation classes
			pincodeInput.removeClass('is-valid is-invalid');

			// Check if empty
			if (!pincode.trim()) {
				pincodeInput.addClass('is-invalid');
				errorDiv.text('Pincode is required.');
				return false;
			}

			// Remove all non-digit characters
			const cleanPincode = pincode.replace(/\D/g, '');

			// Check if it's exactly 6 digits (standard for many countries including India)
			const pincodeRegex = /^\d{6}$/;

			if (!pincodeRegex.test(cleanPincode)) {
				pincodeInput.addClass('is-invalid');
				errorDiv.text('Please enter a valid 6-digit pincode.');
				return false;
			}

			// If validation passes
			pincodeInput.addClass('is-valid');
			errorDiv.text('');
			return true;
		}
	</script>
      }